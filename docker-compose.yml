version: '2.1'

volumes:
 pg_data: {}
 media: {}
 redis_data: {}

networks:
  default:
    driver: bridge
    ipam:
      config:
      - subnet: 172.20.0.0/16

services:
  logs:
    image: gliderlabs/logspout
    environment:
      SYSLOG_HOSTNAME: ${SERVER_NAME:-tcsocket}
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  postgres:
    image: postgres:9.6-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: docker
    volumes:
    - pg_data:/var/lib/postgresql/data
    networks:
      default:
        ipv4_address: 172.20.0.101
    restart: always
    depends_on:
    - logs

  redis:
    image: redis:4-alpine
    volumes:
    - redis_data:/data
    restart: always
    networks:
      default:
        ipv4_address: 172.20.0.102
    depends_on:
    - logs

  web:
    build: tcsocket
    environment:
      APP_PG_HOST: postgres
      APP_PG_PASSWORD: docker
      APP_REDIS_HOST: '172.20.0.102'
      APP_MASTER_KEY: ${APP_MASTER_KEY}
      APP_TC_API_ROOT: ${TC_API_ROOT}
      APP_MEDIA_URL: ${TC_MEDIA_URL}
      APP_ROOT_URL: ${ROOT_URL}
      APP_GEOCODING_KEY: ${GEOCODING_KEY}
      BIND: 0.0.0.0:8000
      CHECK: web
      COMMIT: ${COMMIT}
      RELEASE_DATE: ${RELEASE_DATE}
      RAVEN_DSN: ${RAVEN_DSN}
      SERVER_NAME: ${SERVER_NAME:-tcsocket}
    networks:
      default:
        ipv4_address: 172.20.0.103
    restart: always
    depends_on:
    - postgres
    - redis

  worker:
    build: tcsocket
    volumes:
    - media:/media
    entrypoint:
    - ./run.py
    - worker
    environment:
      APP_PG_HOST: postgres
      APP_PG_PASSWORD: docker
      APP_REDIS_HOST: '172.20.0.102'
      APP_MEDIA_DIR: /media
      APP_TC_API_ROOT: ${TC_API_ROOT}
      APP_MEDIA_URL: ${TC_MEDIA_URL}
      APP_ROOT_URL: ${ROOT_URL}
      APP_GRECAPTCHA_SECRET: ${GRECAPTCHA_SECRET}
      APP_GEOCODING_KEY: ${GEOCODING_KEY}
      CHECK: worker
      COMMIT: ${COMMIT}
      RAVEN_DSN: ${RAVEN_DSN}
      SERVER_NAME: ${SERVER_NAME:-tcsocket}
    restart: always
    depends_on:
    - postgres
    - redis

  pgweb:
    image: sosedoff/pgweb
    entrypoint:
    - '/usr/bin/pgweb'
    - '--bind=0.0.0.0'
    - '--listen=80'
    - '--auth-user=${PG_AUTH_USER:-testing}'
    - '--auth-pass=${PG_AUTH_PASS:-wq96nbgqe35msT41Jr7LaHzANhxcyU4V7lesFzD0wJjef07PwS}'
    restart: always
    environment:
    - DATABASE_URL=postgres://postgres:docker@postgres:5432/socket?sslmode=disable
    depends_on:
    - postgres
